class InstructionMap:

    def __init__(self):       
        # general attributes of all instructions types
        self.map_opcode_rv32im = {
            '0110111' : ['U' , 'lui'], 
            '0010111' : ['U' , 'auipc'], 
            '1101111' : ['J' , 'jal'], 
            '1100111' : ['I' , 'jalr'], 
            '1100011' : ['B' , 'branch'], 
            '1100011000' : ['B' , 'beq'], 
            '1100011001' : ['B' , 'bne'], 
            '1100011100' : ['B' , 'blt'], 
            '1100011101' : ['B' , 'bge'], 
            '1100011110' : ['B' , 'bltu'], 
            '1100011111' : ['B' , 'bgeu'], 
            '0000011' : ['I' , 'lb-lb-lb'], 
            '0000011000' : ['I' , 'lb'], 
            '0000011001' : ['I' , 'lh'], 
            '0000011010' : ['I' , 'lw'], 
            '0000011100' : ['I' , 'lbu'], 
            '0000011101' : ['I' , 'lhu'], 
            '0100011' : ['S' , 'sb-sh-sw'], 
            '0100011000' : ['S' , 'sb'], 
            '0100011001' : ['S' , 'sh'], 
            '0100011010' : ['S' , 'sw'], 
            '0010011' : ['I' , 'aritmetic'], 
            '0010011000' : ['I' , 'addi'], 
            '0010011010' : ['I' , 'slti'], 
            '0010011011' : ['I' , 'sltiu'], 
            '0010011100' : ['I' , 'xori'], 
            '0010011110' : ['I' , 'ori'], 
            '0010011111' : ['I' , 'andi'], 
            '00100110000000001' : ['I' , 'slli'], 
            '00100110000000101' : ['I' , 'srli'], 
            '00100110100000101' : ['I' , 'srai'], 
            '0110011' : ['R' , 'logic'], 
            '01100110000000000' : ['R' , 'add'], 
            '01100110100000000' : ['R' , 'sub'], 
            '01100110000000001' : ['R' , 'sll'], 
            '01100110000000010' : ['R' , 'slt'], 
            '01100110000000011' : ['R' , 'sltu'], 
            '01100110000000100' : ['R' , 'xor'], 
            '01100110000000101' : ['R' , 'srl'], 
            '01100110100000101' : ['R' , 'sra'], 
            '01100110000000110' : ['R' , 'or'], 
            '01100110000000111' : ['R' , 'and'], 
            '0001111000' : ['I' , 'fence'], 
            '0001111001' : ['I' , 'fence.i'], 
            '1110011' : ['I' , 'ecall-ebreak'], 
            '1110011000' : ['I' , 'ecall'], 
            '1110011000' : ['I' , 'ebreak'], 
            '1110011001' : ['I' , 'csrrw'], 
            '1110011010' : ['I' , 'csrrs'], 
            '1110011011' : ['I' , 'csrrc'], 
            '1110011101' : ['I' , 'csrrwi'], 
            '1110011110' : ['I' , 'csrrsi'], 
            '1110011111' : ['I' , 'csrrci'], 
            '0110011' : ['R' , 'muldiv'], 
            '01100110000001000' : ['R' , 'mul'], 
            '01100110000001001' : ['R' , 'mulh'], 
            '01100110000001010' : ['R' , 'mulhsu'], 
            '01100110000001011' : ['R' , 'mulhu'], 
            '01100110000001100' : ['R' , 'div'], 
            '01100110000001101' : ['R' , 'divu'], 
            '01100110000001110' : ['R' , 'rem'], 
            '01100110000001111' : ['R' , 'remu'], 
        }

    # getting the instruction type from opcode 
    def getValue(self, key):
        instruction_dictionary = self.map_opcode_rv32im.get(key)
        return instruction_dictionary
